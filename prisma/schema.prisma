// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String
  password       Password @relation(fields: [passwordId], references: [id], onDelete: Cascade)
  passwordId     String   @unique
  role           Role     @default(USER)
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orders Order[]
}

model Password {
  id        String   @id @default(uuid())
  hashed    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  fabric      Fabric?  @relation(fields: [fabricId], references: [id])
  fabricId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Fabric {
  id        String   @id @default(uuid())
  name      String
  type      String
  color     String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED
}
